{"version":3,"sources":["Row.js","Footer.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["TableCell","props","filledData","map","data","cellDatas","item","Td","onClick","fillCell","index","letter","Tr","styled","td","tr","Row","CurrentState","currentTurn","isEnd","winner","Div","ResetButton","initLetters","Button","button","div","Footer","Title","Component","Turn","flex","CurrentDiv","now","Header","App","state","letters","setState","row","toggleTurn","checkEnd","count","i","length","k","console","log","fullfilledRow","fullfilledColumn","fullfilledDiagonal","wrapUp","array","mark","len","count2","length2","newLetters","this","Table","table","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d9c26ed2.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst TableCell = props => {\n    const rowDatas = props.filledData.map((data) =>{\n      const cellDatas = data.map(item => {\n      return (\n        <Td onClick={() => props.fillCell(item.index, item.letter)}>\n        {item.letter}\n        </Td>\n      )\n  \n    })\n    return <Tr>{cellDatas}</Tr>\n    })\n    return rowDatas\n}\n\n\nconst Row  = props => {\n    const { filledData, fillCell } = props\n    return(\n            <TableCell filledData={filledData} fillCell={fillCell}/>\n    )\n}\n\nconst Td = styled.td`\n  font-size: 1.5em;\n  text-align: center;\n  width: 50px;\n  height: 50px;\n  background-color: #fff;\n  padding: 0px;\n  margin: 0px;\n  `;\n\nconst Tr = styled.tr`\n  padding: 0px;\n  margin: 0px;\n  `;\n\nexport default Row","import React from \"react\";\nimport styled from 'styled-components'\n\nconst CurrentState = (props) => {\n  const { currentTurn, isEnd, winner } = props;\n  if (isEnd === true) {\n    if (winner != null) {\n      return <Div>{winner} win!!</Div>;\n    } else {\n      return <Div>Draw</Div>;\n    }\n  } else {\n    return <Div>Starting...</Div>;\n  }\n};\n\nconst ResetButton = (props) => {\n  const { initLetters } = props;\n  return (\n    <div>\n      <Button onClick={initLetters}>RESTART</Button>\n    </div>\n  );\n};\n\nconst Footer = (props) => {\n  const { initLetters, currentTurn, isEnd, winner } = props;\n  return (\n    <div>\n      <CurrentState currentTurn={currentTurn} isEnd={isEnd} winner={winner} />\n      <ResetButton initLetters={initLetters} />\n    </div>\n  );\n};\n\nconst Button = styled.button`\n  padding: 4px 8px;\n  font-size: .8em;\n  margin: 5px;\n  background-color: #fff;\n  border-radius: 5px;\n  border: 1px solid #888\n  `;\n\n  const Div = styled.div`\n  padding: 8px;\n  margin: 5px;\n  height: 24px;\n  `;\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst CIRCLE = \"◯\";\nconst CROSS = \"×\";\n\nclass Title extends Component {\n  render() {\n    return <h2>TicTacToe</h2>;\n  }\n}\n\nconst Turn = (props) => {\n  const { currentTurn } = props;\n  if (currentTurn === CIRCLE) {\n    return (\n      <Div flex>\n        <CurrentDiv now>◯</CurrentDiv>\n        <CurrentDiv>×</CurrentDiv>\n      </Div>\n    );\n  } else {\n    return (\n      <Div flex>\n        <CurrentDiv>◯</CurrentDiv>\n        <CurrentDiv now>×</CurrentDiv>\n      </Div>\n    );\n  }\n};\n\nconst Header = (props) => {\n  const { currentTurn } = props;\n  return (\n    <Div>\n      <Title />\n      <Turn currentTurn={currentTurn} />\n    </Div>\n  );\n};\n\nconst Div = styled.div`\n  text-align: center;\n  margin: 16px auto;\n  display: ${(props) => (props.flex ? \"flex\" : \"block\")};\n  justify-content: ${(props) => (props.flex ? \"space-around\" : \"none\")};\n  width: 180px;\n`;\n\nconst CurrentDiv = styled.div`\n  width: 50px;\n  padding: 8px;\n  font-size: 1.3em;\n  border-bottom: ${(props) =>\n    props.now ? \"3px solid #fa7364\" : \"3px solid #fff\"};\n`;\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport Row from \"./Row\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\n\nconst CIRCLE = \"◯\";\nconst CROSS = \"×\";\n\nclass App extends Component {\n  // コンストラクタの中に書く\n  state = {\n    letters: [\n      [\n        { index: 0, letter: null },\n        { index: 1, letter: null },\n        { index: 2, letter: null },\n      ],\n      [\n        { index: 3, letter: null },\n        { index: 4, letter: null },\n        { index: 5, letter: null },\n      ],\n      [\n        { index: 6, letter: null },\n        { index: 7, letter: null },\n        { index: 8, letter: null },\n      ],\n    ],\n    currentTurn: CIRCLE,\n    isEnd: false,\n    winner: null,\n  };\n\n  initLetters = () => {\n    // アロー関数にする\n    const { letters, isEnd, winner, currentTurn } = this.state;\n    this.setState({\n      isEnd: false,\n      winner: null,\n      currentTurn: CIRCLE,\n      letters: letters.map((row) => {\n        row.map((data) => {\n          data.letter = null;\n          return data;\n        });\n        return row;\n      }),\n    });\n  };\n\n  toggleTurn = () => {\n    const { currentTurn } = this.state;\n    return currentTurn === CIRCLE ? CROSS : CIRCLE;\n  };\n\n  checkEnd = () => {\n    const { letters, currentTurn } = this.state;\n    let count = 0;\n    for (let i = 0; i < letters.length; i++) {\n      for (let k = 0; k < letters.length; k++) {\n        if (letters[i][k].letter === CIRCLE || letters[i][k].letter === CROSS) {\n          count++;\n        }\n      }\n    }\n    console.log(count);\n    if (count === letters.length * letters.length) {\n      return true;\n    }\n    if (\n      this.fullfilledRow(letters, currentTurn) ||\n      this.fullfilledColumn(letters, currentTurn) ||\n      this.fullfilledDiagonal(letters, currentTurn)\n    ) {\n      this.setState({\n        winner: currentTurn,\n      });\n      return true;\n    }\n    return false;\n  };\n\n  wrapUp = () => {\n    const { isEnd } = this.state;\n    this.setState({\n      isEnd: !isEnd,\n    });\n  };\n\n  fullfilledRow = (array, mark) => {\n    const len = array.length;\n    for (let i = 0; i < len; i++) {\n      let count = 0;\n      for (let k = 0; k < len; k++) {\n        if (array[i][k].letter === mark) {\n          count++;\n        }\n      }\n      if (count === len) {\n        return true;\n      } else {\n        count = 0;\n      }\n    }\n    return false;\n  };\n\n  fullfilledColumn = (array, mark) => {\n    const len = array.length;\n    for (let i = 0; i < len; i++) {\n      let count = 0;\n      for (let k = 0; k < len; k++) {\n        if (array[k][i].letter === mark) {\n          count++;\n        }\n      }\n      if (count === len) {\n        return true;\n      } else {\n        count = 0;\n      }\n    }\n    return false;\n  };\n\n  fullfilledDiagonal = (array, mark) => {\n    const len = array.length; //3\n    let count = 0;\n    let count2 = 0;\n    let length2 = len - 1;\n    for (let i = 0; i < len; i++) {\n      if (array[i][i].letter === mark) {\n        count++;\n      }\n      if (array[i][length2--].letter === mark) {\n        count2++;\n      }\n    }\n    if (count === len || count2 === len) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  fillCell = (index, letter) => {\n    const { letters, currentTurn, isEnd } = this.state;\n    // ここで文字が入ってるかいないかで入力拒否\n    if (isEnd === true) {\n      return;\n    } else if (letter === null) {\n      let newLetters = letters.map((row) => {\n        row.map((data) => {\n          if (data.index === index) {\n            data.letter = currentTurn;\n          }\n          return data;\n        });\n        return row;\n      });\n      this.setState({\n        letters: newLetters,\n        isEnd: this.checkEnd(),\n        currentTurn: this.toggleTurn(),\n      });\n    }\n  };\n\n  render() {\n    // ここにconsole.log入れてレンダリング順番確認可能\n    const { letters, currentTurn, isEnd, winner } = this.state;\n    return (\n      <Div>\n        <Header currentTurn={currentTurn} />\n        <Table>\n          <Row filledData={letters} fillCell={this.fillCell} />\n        </Table>\n        <Footer\n          initLetters={this.initLetters}\n          currentTurn={currentTurn}\n          isEnd={isEnd}\n          winner={winner}\n        />\n      </Div>\n    );\n  }\n}\n\nconst Div = styled.div`\n  padding: 8px;\n  text-align: center;\n  display: ${(props) => (props.flex ? \"flex\" : \"block\")};\n  justify-content: ${(props) => (props.flex ? \"space-around\" : \"none\")};\n`;\n\nconst Table = styled.table`\n  margin: 16px auto;\n  background-color: #000;\n  text-align: center;\n  padding: 0px\n  margin: 0px\n  `;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}